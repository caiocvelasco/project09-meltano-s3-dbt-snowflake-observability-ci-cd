-- =======================================================
-- SETTING UP STORAGE INTEGRATION WITH S3 & EXTERNAL STAGE IN SNOWFLAKE
-- =======================================================
-- Reference: https://docs.snowflake.com/en/user-guide/data-load-s3-config-storage-integration
--
-- This script sets up an end-to-end pipeline to ingest raw files from S3 into
-- Snowflake using external tables (typically managed by dbt).
--
-- ### Transformation Step
--
-- 1) Ensure your AWS environment is ready:
--    * Create an S3 bucket, e.g., `s3-observability-project`.
--    * Define a folder structure for files (e.g., by source/system/date).
--    * Create an IAM user (e.g., meltano-ingest-user) and attach it to an IAM group
--      with a policy allowing access to your S3 bucket.
--    * Create an IAM role (e.g., snowflake-observability-role) for Snowflake to assume.
--      - Attach the same S3 bucket policy to this role.
--      - Update the trust policy to allow Snowflake to assume the role using the
--        STORAGE_AWS_EXTERNAL_ID generated by Snowflake.
--
-- 2) Ensure your Snowflake environment is ready:
--    * Create a Storage Integration in Snowflake that references the AWS IAM Role.
--    * Create an External Stage in Snowflake pointing to your S3 bucket/folder.
--    * Whenever the External Stage changes, update the AWS IAM Role trust policy
--      to include the new External ID from Snowflake.
--
-- 3) Follow this script in order:
--    * Step 1: Create database and schemas (RAW, STAGING, ANALYTICS)
--    * Step 2: Create Snowflake roles (INGEST_TRANSFORM_ROLE, ANALYST_ROLE)
--    * Step 3: Grant privileges to roles
--    * Step 4: Create Storage Integration pointing to AWS IAM Role
--    * Step 5: Create file formats for external tables
--    * Step 6: Create external stage(s)
--    * Step 7: Optionally create external tables (dbt can manage this)
--    * Step 8: Assign roles to users (RBAC)
--
-- 4) Role-based Access Control (RBAC) overview:
--    * INGEST_TRANSFORM_ROLE
--      - Can create stages, file formats, external tables
--      - Can select on future tables
--    * ANALYST_ROLE
--      - Read-only access to STAGING and ANALYTICS schemas
--      - Select on existing and future tables
--    * SYSADMIN / ACCOUNTADMIN
--      - Retain full control over all objects
--
-- 5) Notes on single-user environments:
--    * If you have only one user (e.g., CAIOSANDBOX01), you may assign both
--      INGEST_TRANSFORM_ROLE and ANALYST_ROLE to this user.
--    * The GRANT ROLE statements in Step 8 are examples for multiple users.

-- =======================================================
-- STEP 1 - Databases, Warehouses, and Schemas
-- =======================================================

-- 1. Create database for the project
CREATE DATABASE IF NOT EXISTS OBS_PROJECT;

-- 2. Create schemas for layers
CREATE SCHEMA IF NOT EXISTS OBS_PROJECT.RAW;       -- for external tables
CREATE SCHEMA IF NOT EXISTS OBS_PROJECT.STAGING;   -- for dbt staging models
CREATE SCHEMA IF NOT EXISTS OBS_PROJECT.ANALYTICS; -- for final models

-- 3. Use the database (optional, makes subsequent commands simpler)
USE DATABASE OBS_PROJECT;


-- =======================================================
-- STEP 2 - Roles
-- =======================================================

-- 1. Role for ingestion & transformation (dbt, integrations, external tables)
CREATE ROLE IF NOT EXISTS INGEST_TRANSFORM_ROLE;

-- 2. Role for analysts (read-only access)
CREATE ROLE IF NOT EXISTS ANALYST_ROLE;


-- =======================================================
-- STEP 3 - Grant Privileges
-- =======================================================

-- INGEST_TRANSFORM_ROLE needs full control over all schemas
GRANT USAGE ON DATABASE OBS_PROJECT TO ROLE INGEST_TRANSFORM_ROLE;

GRANT USAGE ON SCHEMA OBS_PROJECT.RAW TO ROLE INGEST_TRANSFORM_ROLE;
GRANT USAGE ON SCHEMA OBS_PROJECT.STAGING TO ROLE INGEST_TRANSFORM_ROLE;
GRANT USAGE ON SCHEMA OBS_PROJECT.ANALYTICS TO ROLE INGEST_TRANSFORM_ROLE;

-- RAW schema: external tables, file formats, stages
GRANT CREATE TABLE, CREATE STAGE, CREATE FILE FORMAT 
  ON SCHEMA OBS_PROJECT.RAW TO ROLE INGEST_TRANSFORM_ROLE;

-- STAGING schema: dbt models
GRANT CREATE TABLE, CREATE VIEW 
  ON SCHEMA OBS_PROJECT.STAGING TO ROLE INGEST_TRANSFORM_ROLE;

-- ANALYTICS schema: dbt final models
GRANT CREATE TABLE, CREATE VIEW 
  ON SCHEMA OBS_PROJECT.ANALYTICS TO ROLE INGEST_TRANSFORM_ROLE;

-- Allow role to create storage integrations (account-level)
GRANT CREATE INTEGRATION ON ACCOUNT TO ROLE INGEST_TRANSFORM_ROLE;

-- Future-proof: ingestion role should also be able to select from new tables
GRANT SELECT ON FUTURE TABLES IN SCHEMA OBS_PROJECT.RAW TO ROLE INGEST_TRANSFORM_ROLE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA OBS_PROJECT.STAGING TO ROLE INGEST_TRANSFORM_ROLE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA OBS_PROJECT.ANALYTICS TO ROLE INGEST_TRANSFORM_ROLE;


-- ANALYST_ROLE should only read from staging + analytics
GRANT USAGE ON DATABASE OBS_PROJECT TO ROLE ANALYST_ROLE;

GRANT USAGE ON SCHEMA OBS_PROJECT.STAGING TO ROLE ANALYST_ROLE;
GRANT USAGE ON SCHEMA OBS_PROJECT.ANALYTICS TO ROLE ANALYST_ROLE;

GRANT SELECT ON ALL TABLES IN SCHEMA OBS_PROJECT.STAGING TO ROLE ANALYST_ROLE;
GRANT SELECT ON ALL TABLES IN SCHEMA OBS_PROJECT.ANALYTICS TO ROLE ANALYST_ROLE;

-- Future grants for analysts
GRANT SELECT ON FUTURE TABLES IN SCHEMA OBS_PROJECT.STAGING TO ROLE ANALYST_ROLE;
GRANT SELECT ON FUTURE TABLES IN SCHEMA OBS_PROJECT.ANALYTICS TO ROLE ANALYST_ROLE;


-- =======================================================
-- STEP 4 - Storage Integration with S3
-- =======================================================

CREATE STORAGE INTEGRATION IF NOT EXISTS OBS_S3_INTEGRATION
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = 'S3'
  ENABLED = TRUE
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::286218346471:role/snowflake-observability-role'
  STORAGE_ALLOWED_LOCATIONS = ('s3://s3-observability-project');

-- Allow ingestion role to use the integration
GRANT USAGE ON INTEGRATION OBS_S3_INTEGRATION TO ROLE INGEST_TRANSFORM_ROLE;

-- Check integration details (copy STORAGE_AWS_IAM_USER_ARN + STORAGE_AWS_EXTERNAL_ID to AWS role trust policy)
DESC INTEGRATION OBS_S3_INTEGRATION;


-- =======================================================
-- STEP 5 - File Format
-- =======================================================

CREATE FILE FORMAT IF NOT EXISTS OBS_PROJECT.RAW.OBS_CSV_FORMAT
  TYPE = CSV
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  SKIP_HEADER = 1;

GRANT USAGE ON FILE FORMAT OBS_PROJECT.RAW.OBS_CSV_FORMAT TO ROLE INGEST_TRANSFORM_ROLE;


-- =======================================================
-- STEP 6 - External Stage
-- =======================================================

CREATE STAGE IF NOT EXISTS OBS_PROJECT.RAW.S3_STAGE
  STORAGE_INTEGRATION = OBS_S3_INTEGRATION
  URL = 's3://s3-observability-project/raw/stripe/'  -- folder containing CSVs
  FILE_FORMAT = OBS_PROJECT.RAW.OBS_CSV_FORMAT;

GRANT USAGE ON STAGE OBS_PROJECT.RAW.S3_STAGE TO ROLE INGEST_TRANSFORM_ROLE;

-- Debugging / testing: list files in stage
LIST @OBS_PROJECT.RAW.S3_STAGE;


-- =======================================================
-- STEP 7 - External Tables (dbt will usually generate)
-- =======================================================

-- Example external table for charges
CREATE OR REPLACE EXTERNAL TABLE OBS_PROJECT.RAW.CHARGES
WITH LOCATION = @OBS_PROJECT.RAW.S3_STAGE
AUTO_REFRESH = FALSE
FILE_FORMAT = OBS_PROJECT.RAW.OBS_CSV_FORMAT;


-- =======================================================
-- STEP 8 - Assign Roles to Users (Example)
-- =======================================================

-- Example: assign roles to users
-- If you have multiple users, you would grant roles as follows:

-- Grant ingestion role to a dbt/ingestion user
GRANT ROLE INGEST_TRANSFORM_ROLE TO USER DBT_USER;

-- Grant analyst role to a read-only analyst user
GRANT ROLE ANALYST_ROLE TO USER ANALYST_USER;

-- Note: In your current setup, you only have one user (CAIOSANDBOX01).
-- You could assign both roles to this single user if needed:
-- GRANT ROLE INGEST_TRANSFORM_ROLE TO USER CAIOSANDBOX01;
-- GRANT ROLE ANALYST_ROLE TO USER CAIOSANDBOX01;

-- =======================================================
-- SHOW USERS, ROLES, AND GRANTS (for verification)
-- =======================================================

-- List all roles in your Snowflake account
SHOW ROLES;

-- List all users in your Snowflake account
SHOW USERS;

-- Optional: see which roles are granted to a specific user
SHOW GRANTS TO USER CAIOSANDBOX01;

-- Optional: see which privileges each role has
SHOW GRANTS TO ROLE ANALYST_ROLE;
SHOW GRANTS TO ROLE INGEST_TRANSFORM_ROLE;

